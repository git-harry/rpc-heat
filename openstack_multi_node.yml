heat_template_version: 2014-10-16

parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)

  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: general1-8

  key_name:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: default

  os_ansible_git_repo:
    type: string
    label: os-ansible git repo
    description: URL of os-ansible git repo to clone
    default: https://github.com/openstack/openstack-ansible

  os_ansible_git_version:
    type: string
    label: os-ansible version
    description: os-ansible version to install (master, juno, stable, 9.0.5, 10.1.1, etc.)
    # By default we will deploy the version of openstack-ansible defined as a submodule
    # in rpc-openstack
    default: ''

  heat_git_repo:
    type: string
    label: Heat git repo
    description: URL of Heat git repo to clone
    default: https://github.com/rcbops/rpc-heat

  heat_git_version:
    type: string
    label: Heat version
    description: Heat version to install
    default: master

  rpc_openstack_git_repo:
    type: string
    label: rpc-openstack git repo
    description: URL of rpc-openstack git repo to clone
    default: https://github.com/rcbops/rpc-openstack

  rpc_openstack_git_version:
    type: string
    label: rpc-openstack version
    description: rpc-openstack version to install
    default: master

  cluster_prefix:
    type: string
    label: Cluster prefix
    description: Prefix to use when building cluster
    default: heat
    constraints:
      # The recommended hostname length should be less than 20 chars, we tack
      # on -nodeX which adds up to another 5 chars, hence max being 14.
      - length: { min: 1, max: 14 }

  deploy_logging:
    type: string
    label: Deploy logging solution
    description: Deploy logging solution
    default: 'yes'

  deploy_openstack:
    type: string
    label: Deploy openstack playbooks
    description: Deploy openstack playbooks
    default: 'yes'

  deploy_ceph:
    type: string
    label: Deploy Ceph
    description: Deploy Ceph
    default: 'no'

  ceph_node_count:
    type: number
    label: Number of Ceph nodes to create
    description: Number of Ceph nodes to create
    default: 0
    constraints:
      - range: { min: 0, max: 10 }

  deploy_swift:
    type: string
    label: Deploy swift
    description: Deploy swift
    default: 'yes'

  deploy_tempest:
    type: string
    label: Deploy tempest
    description: Deploy tempest
    default: 'yes'

  deploy_monitoring:
    type: string
    label: Deploy monitoring solution
    description: Deploy monitoring solution (this will only work on Rackspace Cloud Servers instances)
    default: 'yes'

  test_monitoring:
    type: string
    label: Test monitoring solution
    description: Test monitoring solution (this will only work on Rackspace Cloud Servers instances)
    default: 'no'

  run_ansible:
    type: boolean
    label: Run ansible
    description: If true ansible will be run as part of the stack-create
    default: true

  rackspace_cloud_api_key:
    type: string
    label: Rackspace Cloud API Key
    description: Rackspace Cloud API Key
    default: SomeAPIKey
    hidden: True

  rackspace_cloud_auth_url:
    type: string
    label: Rackspace Cloud Auth URL
    description: Rackspace Cloud Auth URL
    default: https://identity.api.rackspacecloud.com/v2.0
    hidden: True

  rackspace_cloud_password:
    type: string
    label: Rackspace Cloud Password
    description: Rackspace Cloud Password
    default: SomeUsersPassword
    hidden: True

  rackspace_cloud_tenant_id:
    type: string
    label: Rackspace Cloud Tenant ID
    description: Rackspace Cloud Tenant ID
    default: SomeTenantID
    hidden: True

  rackspace_cloud_username:
    type: string
    label: Rackspace Cloud Username
    description: Rackspace Cloud Username
    default: SomeUserName
    hidden: True

  glance_default_store:
    type: string
    label: Glance Default Store
    description: The storage backend to configure glance with
    default: swift
    constraints:
      - allowed_values: [ swift, file, rbd ]

  glance_swift_store_region:
    type: string
    label: Glance Swift Store Region
    description: The swift region to store glance images in
    default: LON
    constraints:
      - allowed_values: [ DFW, HKG, IAD, LON, ORD, SYD ]

  gerrit_refspec:
    type: string
    label: Git reference for the patch to test
    default: ''

  run_tempest:
    type: boolean
    label: Run tempest after deploying
    default: false

  tempest_script_parameters:
    type: string
    label: parameters to pass to pass to run-tempest which calls openstack_tempest_gate
    default: smoke

  volume_size:
    type: number
    description: Size of volume to create
    default: 100

  ceph_mountpoints:
    type: comma_delimited_list
    label: List of device mount points for our ceph nodes
    description: This parameter is used interally, do not override
    default: "/dev/xvdf,/dev/xvdg,/dev/xvdh,/dev/xvdi,/dev/xvdj,/dev/xvdk"

resources:
  controller1_wait:
    type: "OS::Heat::SwiftSignal"
    properties:
      handle: { get_resource: controller1_wait_handle }
      count: 1
      timeout: 7200
  controller1_wait_handle:
    type: "OS::Heat::SwiftSignalHandle"

  controller2_wait:
    type: "OS::Heat::SwiftSignal"
    properties:
      handle: { get_resource: controller2_wait_handle }
      count: 1
      timeout: 900
  controller2_wait_handle:
    type: "OS::Heat::SwiftSignalHandle"

  controller3_wait:
    type: "OS::Heat::SwiftSignal"
    properties:
      handle: { get_resource: controller3_wait_handle }
      count: 1
      timeout: 900
  controller3_wait_handle:
    type: "OS::Heat::SwiftSignalHandle"

  compute1_wait:
    type: "OS::Heat::SwiftSignal"
    properties:
      handle: { get_resource: compute1_wait_handle }
      count: 1
      timeout: 900
  compute1_wait_handle:
    type: "OS::Heat::SwiftSignalHandle"

  compute2_wait:
    type: "OS::Heat::SwiftSignal"
    properties:
      handle: { get_resource: compute2_wait_handle }
      count: 1
      timeout: 900
  compute2_wait_handle:
    type: "OS::Heat::SwiftSignalHandle"

  heat_mgmt_vxlan:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: stack_mgmt_vxlan
          params:
            stack: { get_param: "OS::stack_name" }

  heat_mgmt_vxlan_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: heat_mgmt_vxlan }
      cidr: 172.29.236.0/22

  heat_tunnel:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: stack_tunnel
          params:
            stack: { get_param: "OS::stack_name" }

  heat_tunnel_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: heat_tunnel }
      cidr: 172.29.240.0/22

  heat_storage:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: stack_storage
          params:
            stack: { get_param: "OS::stack_name" }

  heat_storage_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: heat_storage }
      cidr: 172.29.228.0/22

  boot_config:
    type: Heat::InstallConfigAgent

  controller1_osa_bootstrap_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: { get_file: bootstrap.sh }
          params:
            "%%NODE1_NAME%%":
              get_attr: [controller1, name]
            "%%NODE1_IP%%":
              get_attr: [controller1, networks, { str_replace: {template: stack_mgmt_vxlan, params: {stack: {get_param: "OS::stack_name"}}} }, 0]
            "%%NODE2_NAME%%":
              get_attr: [controller2, name]
            "%%NODE2_IP%%":
              get_attr: [controller2, networks, { str_replace: {template: stack_mgmt_vxlan, params: {stack: {get_param: "OS::stack_name"}}} }, 0]
            "%%NODE3_NAME%%":
              get_attr: [controller3, name]
            "%%NODE3_IP%%":
              get_attr: [controller3, networks, { str_replace: {template: stack_mgmt_vxlan, params: {stack: {get_param: "OS::stack_name"}}} }, 0]
            "%%NODE4_NAME%%":
              get_attr: [compute1, name]
            "%%NODE4_IP%%":
              get_attr: [compute1, networks, { str_replace: {template: stack_mgmt_vxlan, params: {stack: {get_param: "OS::stack_name"}}} }, 0]
            "%%NODE5_NAME%%":
              get_attr: [compute2, name]
            "%%NODE5_IP%%":
              get_attr: [compute2, networks, { str_replace: {template: stack_mgmt_vxlan, params: {stack: {get_param: "OS::stack_name"}}} }, 0]
            "%%EXTERNAL_VIP_IP%%": { get_attr: [controller3, accessIPv4] }
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
            "%%DEPLOY_LOGGING%%": { get_param: deploy_logging }
            "%%DEPLOY_OPENSTACK%%": { get_param: deploy_openstack }
            "%%DEPLOY_TEMPEST%%": { get_param: deploy_tempest }
            "%%RUN_TEMPEST%%": { get_param: run_tempest }
            "%%TEMPEST_SCRIPT_PARAMETERS%%": { get_param: tempest_script_parameters }
            "%%DEPLOY_SWIFT%%": { get_param: deploy_swift }
            "%%DEPLOY_CEPH%%": { get_param: deploy_ceph }
            "%%CEPH_NODE_COUNT%%": { get_param: ceph_node_count }
            "%%DEPLOY_MONITORING%%": { get_param: deploy_monitoring }
            "%%TEST_MONITORING%%": { get_param: test_monitoring }
            "%%OS_ANSIBLE_GIT_REPO%%": { get_param: os_ansible_git_repo }
            "%%OS_ANSIBLE_GIT_VERSION%%": { get_param: os_ansible_git_version }
            "%%HEAT_GIT_REPO%%": { get_param: heat_git_repo }
            "%%HEAT_GIT_VERSION%%": { get_param: heat_git_version }
            "%%RPC_OPENSTACK_GIT_REPO%%": { get_param: rpc_openstack_git_repo }
            "%%RPC_OPENSTACK_GIT_VERSION%%": { get_param: rpc_openstack_git_version }
            "%%RACKSPACE_CLOUD_API_KEY%%": { get_param: rackspace_cloud_api_key }
            "%%RACKSPACE_CLOUD_AUTH_URL%%": { get_param: rackspace_cloud_auth_url }
            "%%RACKSPACE_CLOUD_PASSWORD%%": { get_param: rackspace_cloud_password }
            "%%RACKSPACE_CLOUD_TENANT_ID%%": { get_param: rackspace_cloud_tenant_id }
            "%%RACKSPACE_CLOUD_USERNAME%%": { get_param: rackspace_cloud_username }
            "%%GLANCE_DEFAULT_STORE%%": { get_param: glance_default_store }
            "%%GLANCE_SWIFT_STORE_REGION%%": { get_param: glance_swift_store_region }
            "%%RUN_ANSIBLE%%": { get_param: run_ansible }
            "%%GERRIT_REFSPEC%%": { get_param: gerrit_refspec }
      outputs:
        - name: result

  deploy_controller1_osa_bootstrap:
    type: OS::Heat::SoftwareDeployment
    depends_on: [controller1_volume_attachment, controller2_volume_attachment, controller3_volume_attachment, compute1_volume_attachment, compute2_volume_attachment, ceph_nodes]
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config: { get_resource: controller1_osa_bootstrap_config }
      server: { get_resource: controller1 }

  controller1_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: { get_file: deploy.sh }
          params:
            "%%DEPLOY_LOGGING%%": { get_param: deploy_logging }
            "%%DEPLOY_OPENSTACK%%": { get_param: deploy_openstack }
            "%%DEPLOY_TEMPEST%%": { get_param: deploy_tempest }
            "%%RUN_TEMPEST%%": { get_param: run_tempest }
            "%%TEMPEST_SCRIPT_PARAMETERS%%": { get_param: tempest_script_parameters }
            "%%DEPLOY_SWIFT%%": { get_param: deploy_swift }
            "%%DEPLOY_CEPH%%": { get_param: deploy_ceph }
            "%%CEPH_NODE_COUNT%%": { get_param: ceph_node_count }
            "%%DEPLOY_MONITORING%%": { get_param: deploy_monitoring }
            "%%TEST_MONITORING%%": { get_param: test_monitoring }
            "%%CURL_CLI%%": { get_attr: ['controller1_wait_handle', 'curl_cli'] }
            "%%GERRIT_REFSPEC%%": { get_param: gerrit_refspec }
      outputs:
        - name: result

  deploy_controller1:
    type: OS::Heat::SoftwareDeployment
    depends_on: [deploy_controller1_osa_bootstrap]
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config: { get_resource: controller1_config }
      server: { get_resource: controller1 }

  controller1:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node1"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True
      user_data_format: SOFTWARE_CONFIG
      software_config_transport: POLL_TEMP_URL
      user_data: { get_attr: [boot_config, config] }

  controller1_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      description: Volume for stack

  controller1_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: controller1_volume }
      instance_uuid: { get_resource: controller1 }
      mountpoint: "/dev/xvdf"

  controller2:
    type: "OS::Nova::Server"
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node2"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True

  controller2_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      description: Volume for stack

  controller2_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: controller2_volume }
      instance_uuid: { get_resource: controller2 }
      mountpoint: "/dev/xvdf"

  controller3:
    type: "OS::Nova::Server"
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node3"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True

  controller3_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      description: Volume for stack

  controller3_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: controller3_volume }
      instance_uuid: { get_resource: controller3 }
      mountpoint: "/dev/xvdf"

  compute1:
    type: "OS::Nova::Server"
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node4"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True

  compute1_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      description: Volume for stack

  compute1_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: compute1_volume }
      instance_uuid: { get_resource: compute1 }
      mountpoint: "/dev/xvdf"

  compute2:
    type: "OS::Nova::Server"
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node5"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True

  compute2_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      description: Volume for stack

  compute2_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: compute2_volume }
      instance_uuid: { get_resource: compute2 }
      mountpoint: "/dev/xvdf"

  ceph_nodes:
    type: 'OS::Heat::ResourceGroup'
    properties:
      count: { get_param: ceph_node_count }
      resource_def:
        type: 'RPC::Server::WithVolumes'
        properties:
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          cluster_prefix: { get_param: cluster_prefix }
          deploy_ceph: { get_param: deploy_ceph }
          ceph_node_count: { get_param: ceph_node_count }
          group_index: '%index%'
          heat_mgmt_vxlan: { get_resource: heat_mgmt_vxlan }
          heat_tunnel: { get_resource: heat_tunnel }
          heat_storage: { get_resource: heat_storage }
          volume_size: 400
          ceph_mountpoints: { get_param: ceph_mountpoints }

outputs:
  controller1_ip:
    description: The IP address of controller1
    value: { get_attr: [controller1, accessIPv4] }
  controller2_ip:
    description: The IP address of controller2
    value: { get_attr: [controller2, accessIPv4] }
  controller3_ip:
    description: The IP address of controller3
    value: { get_attr: [controller3, accessIPv4] }
  compute1_ip:
    description: The IP address of compute1
    value: { get_attr: [compute1, accessIPv4] }
  compute2_ip:
    description: The IP address of compute2
    value: { get_attr: [compute2, accessIPv4] }
  ceph_nodes_ip:
    description: The IP address of ceph1
    value: { get_attr: [ceph_nodes, accessIPv4] }
